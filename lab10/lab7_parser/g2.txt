N = program`decl_list`decl_stmt`decl_aux`type`data_type`array_type`cmp_stmt`stmt`assign_stmt`io_stmt`struct_stmt`input_stmt`print_stmt`print_aux`print_operand`if_stmt`for_stmt`while_stmt`expression`simple_assign_stmt`add_assign_stmt`sub_assign_stmt`condition`init_stmt`iteration_expr`rel_expr`rel_operand`arithm_expr`arithm_comp`arithm_operand`inc_dec_expr`logic_expr`logic_comp`neg_expr`sqrt_expr`rel_op`arithm_op`inc_dec_op`logic_op`neg_op
S = program
T = def`main`{`}`\n`;`int`char`string`boolean`[`]`=`+=`-=`(`)`input`print`if`else`while`for`==`!=`<`<=`>`>=`+`-`*`/`^`++`--`!`||`&&`sqrt`,`IDENTIFIER`CONSTANT
P =
program := def main { decl_list cmp_stmt }
decl_list := decl_stmt \n decl_list | decl_stmt \n
decl_stmt := type IDENTIFIER decl_aux ; | type IDENTIFIER ;
decl_aux := , IDENTIFIER decl_aux | , IDENTIFIER
type := data_type | array_type
data_type := int | char | string | boolean
array_type := data_type [ CONSTANT ]
cmp_stmt := stmt \n cmp_stmt | stmt \n
stmt := assign_stmt | io_stmt | struct_stmt
io_stmt := input_stmt | print_stmt
struct_stmt := if_stmt | for_stmt | while_stmt
assign_stmt := simple_assign_stmt | add_assign_stmt | sub_assign_stmt
simple_assign_stmt := IDENTIFIER = expression ;
add_assign_stmt := IDENTIFIER += expression ;
sub_assign_stmt := IDENTIFIER -= expression ;
input_stmt := IDENTIFIER = input ( string ) ;
input_stmt := IDENTIFIER = input ( ) ;
print_stmt := print ( print_operand print_aux ) ; | print ( print_operand ) ;
print_aux := , print_operand print_aux | , print_operand
print_operand := string | IDENTIFIER
if_stmt := if ( condition ) \n { cmp_stmt } else { cmp_stmt }
if_stmt := if ( condition ) \n { cmp_stmt }
while_stmt := while ( condition ) \n { cmp_stmt }
for_stmt := for ( init_stmt ; condition ; iteration_expr ) \n { cmp_stmt }
init_stmt := IDENTIFIER = CONSTANT
iteration_expr := inc_dec_expr
condition := rel_expr | logic_expr
expression := rel_expr | arithm_expr | inc_dec_expr | logic_expr | neg_expr | sqrt_expr | IDENTIFIER | CONSTANT
rel_expr := rel_operand rel_op rel_operand
rel_operand := IDENTIFIER | CONSTANT | arithm_expr
rel_op := == | != | < | <= | > | >=
arithm_expr := ( arithm_operand arithm_op arithm_operand ) arithm_comp | ( arithm_operand arithm_op arithm_operand )
arithm_expr := arithm_operand arithm_op arithm_operand arithm_comp | arithm_operand arithm_op arithm_operand
arithm_comp := arithm_op arithm_operand arithm_comp | arithm_op arithm_operand
arithm_operand := IDENTIFIER | CONSTANT
arithm_op := + | - | * | / | ^
inc_dec_expr := inc_dec_op IDENTIFIER ; | IDENTIFIER inc_dec_op ;
inc_dec_expr := inc_dec_op IDENTIFIER | IDENTIFIER inc_dec_op
inc_dec_op := ++ | --
logic_expr := rel_expr logic_op rel_expr logic_comp | rel_expr logic_op rel_expr
logic_comp := logic_op rel_expr logic_comp | logic_op rel_expr
logic_op := && | ||
neg_expr := neg_op ( expression )
neg_expr := neg_op expression
neg_op := !
sqrt_expr := sqrt ( arithm_expr )